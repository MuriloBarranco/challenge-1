import { NextApiRequest, NextApiResponse, PreviewData } from 'next';
import { Client, HttpRequestLike } from '@prismicio/client';
import React from 'react';
import { LinkResolverFunction } from '@prismicio/helpers';

/**
 * Configuration for `setPreviewData`.
 */
declare type SetPreviewDataConfig = {
    /**
     * The `req` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    req: {
        query: NextApiRequest["query"];
        cookies: NextApiRequest["cookies"];
    };
    /**
     * The `res` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    res: {
        setPreviewData: NextApiResponse["setPreviewData"];
    };
};
/**
 * Set Prismic preview data for Next.js's Preview Mode.
 */
declare function setPreviewData({ req, res }: SetPreviewDataConfig): void;

/**
 * Configuration for `enableAutoPreviews`.
 *
 * @typeParam TPreviewData - Next.js preview data object.
 */
declare type EnableAutoPreviewsConfig<TPreviewData extends PreviewData = PreviewData> = {
    /**
     * Prismic client with which automatic previews will be enabled.
     */
    client: Client;
} & ({
    /**
     * A Next.js context object (such as the context object from
     * `getStaticProps` or `getServerSideProps`).
     *
     * Pass a `context` object when using `enableAutoPreviews` outside a
     * Next.js API endpoint.
     */
    previewData?: TPreviewData;
} | {
    /**
     * A Next.js API endpoint request object.
     *
     * Pass a `req` object when using `enableAutoPreviews` in a Next.js API endpoint.
     */
    req?: HttpRequestLike;
});
/**
 * Configures a Prismic client to automatically query draft content during a
 * preview session. It either takes in a Next.js `getStaticProps` context object
 * or a Next.js API endpoint request object.
 *
 * @param config - Configuration for the function.
 */
declare const enableAutoPreviews: <TPreviewData extends PreviewData>(config: EnableAutoPreviewsConfig<TPreviewData>) => void;

/**
 * Configuration for `exitPreview`.
 */
declare type ExitPreviewConfig = {
    /**
     * The `req` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    req: {
        headers: {
            referer?: NextApiRequest["headers"]["referer"];
        };
    };
    /**
     * The `res` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    res: {
        clearPreviewData: NextApiResponse["clearPreviewData"];
        redirect: NextApiResponse["redirect"];
    };
};
/**
 * Exits Next.js's Preview Mode from within a Next.js API route.
 *
 * If the user was sent to the endpoint from a page, the user will be redirected
 * back to that page after exiting Preview Mode.
 */
declare function exitPreview(config: ExitPreviewConfig): void;

/**
 * Props for `<PrismicPreview>`.
 */
declare type PrismicPreviewProps = {
    /**
     * The name of your Prismic repository. A Prismic Toolbar will be registered
     * using this repository.
     */
    repositoryName: string;
    /**
     * The URL of your app's Prismic preview endpoint (default: `/api/preview`).
     * This URL will be fetched on preview update events.
     */
    updatePreviewURL?: string;
    /**
     * The URL of your app's exit preview endpoint (default: `/api/exit-preview`).
     * This URL will be fetched on preview exit events.
     */
    exitPreviewURL?: string;
    children?: React.ReactNode;
};
/**
 * React component that sets up Prismic Previews using the Prismic Toolbar. When
 * the Prismic Toolbar send events to the browser, such as on preview updates
 * and exiting, this component will automatically update the Next.js preview
 * cookie and refresh the page.
 *
 * This component can be wrapped around your app or added anywhere in your app's
 * tree. It must be rendered on every page.
 */
declare function PrismicPreview({ repositoryName, children, updatePreviewURL, exitPreviewURL, }: PrismicPreviewProps): JSX.Element;

/**
 * Redirects a user to the URL of a previewed Prismic document from within a
 * Next.js API route.
 */
declare function redirectToPreviewURL<TLinkResolverFunction extends LinkResolverFunction<any>>({ req, res, client, linkResolver, defaultURL, }: PreviewConfig<TLinkResolverFunction>): Promise<void>;

/**
 * Configuration for creating a Prismic client with automatic preview support in
 * Next.js apps.
 */
declare type CreateClientConfig = {
    /**
     * Preview data coming from Next.js context object. This context object comes
     * from `getStaticProps` or `getServerSideProps`.
     *
     * Pass `previewData` when using outside a Next.js API endpoint.
     */
    previewData?: PreviewData;
    /**
     * A Next.js API endpoint request object.
     *
     * Pass a `req` object when using in a Next.js API endpoint.
     */
    req?: NextApiRequest;
};
/**
 * Preview config for enabling previews with redirectToPreviewURL
 */
declare type PreviewConfig<TLinkResolverFunction extends LinkResolverFunction<any> = LinkResolverFunction> = {
    /**
     * The `req` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    req: {
        query: NextApiRequest["query"];
    };
    /**
     * The `res` object from a Next.js API route. This is given as a parameter to
     * the API route.
     *
     * @see Next.js API route docs: {@link https://nextjs.org/docs/api-routes/introduction}
     */
    res: {
        redirect: NextApiResponse["redirect"];
    };
    /**
     * The Prismic client configured for the preview session's repository.
     */
    client: Client;
    /**
     * A Link Resolver used to resolve the previewed document's URL.
     *
     * @see To learn more about Link Resolver: {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: TLinkResolverFunction;
    /**
     * The default redirect URL if a URL cannot be determined for the previewed document.
     */
    defaultURL?: string;
};

export { CreateClientConfig, EnableAutoPreviewsConfig, ExitPreviewConfig as ExitPreviewParams, PreviewConfig, PrismicPreview, PrismicPreviewProps, SetPreviewDataConfig, enableAutoPreviews, exitPreview, redirectToPreviewURL, setPreviewData };
